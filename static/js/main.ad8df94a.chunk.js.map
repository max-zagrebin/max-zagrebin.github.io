{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["step","curDirection","BOARD_SIZE","DEFAULT_CELLS_ARRAY","Array","fill","AVAILABLE_MOVES","phrase","dead","checkPositionOut","position","Cell","type","className","App","React","useState","snake","setSnake","food","setFood","direction","setDirection","gameover","setGameover","handleKeyDown","event","index","indexOf","key","newDirection","checkDirection","useEffect","document","addEventListener","interval","gameLoop","clearInterval","timerId","setTimeout","newSnake","move","head","length","some","elem","push","sliceIndex","newFood","Math","floor","random","generateFood","slice","map","row","indexR","cell","indexC","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ad8df94a.chunk.js","sourcesContent":["import React from 'react'\nimport './App.css';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nconst BOARD_SIZE = 10\nconst DEFAULT_CELLS_ARRAY = Array(BOARD_SIZE).fill(Array(BOARD_SIZE).fill(0))\nconst AVAILABLE_MOVES = ['ArrowUp', 'ArrowDown', 'ArrowRight', 'ArrowLeft',]\nconst SPEED = 200\nlet step\nlet curDirection\nlet phrase = 'Счет:'\nlet dead = false\n\nconst checkPositionOut = position => {\n    switch (true) {\n        case position >= BOARD_SIZE:\n            return 0\n        case position < 0:\n            return BOARD_SIZE - 1\n        default:\n            return position\n    }\n}\n\nconst checkDirection = (curDirection, newDirection) => {\n    //console.log([curDirection, newDirection])\n    switch (newDirection) {\n        case AVAILABLE_MOVES[0] :\n            if (curDirection === AVAILABLE_MOVES[1]) return curDirection\n            break;\n        case AVAILABLE_MOVES[1]:\n            if (curDirection === AVAILABLE_MOVES[0]) return curDirection\n            break;\n        case AVAILABLE_MOVES[2]:\n            if (curDirection === AVAILABLE_MOVES[3]) return curDirection\n            break;\n        case AVAILABLE_MOVES[3]:\n            if (curDirection === AVAILABLE_MOVES[2]) return curDirection\n            break;\n    }\n    return newDirection\n}\n\nconst App = () => {\n    //или массив объектов - [{x:0, y:0}]\n    const [snake, setSnake] = React.useState([[1, 1]])\n    const [food, setFood] = React.useState([0, 0])\n    const [direction, setDirection] = React.useState(AVAILABLE_MOVES[1])\n    const [gameover, setGameover] = React.useState(false)\n\n    const handleKeyDown = (event) => {\n       // console.log(event.key)\n        const index = AVAILABLE_MOVES.indexOf(event.key)\n        if (index > -1 && !step) {\n            step = true;\n            curDirection = checkDirection(curDirection, AVAILABLE_MOVES[index])\n            setDirection(curDirection)\n        }\n\n    }\n    React.useEffect(() => {\n\n       // document.addEventListener('keydown', handleKeyDown)\n    }, [gameover])\n\n    React.useEffect(() => {\n        document.addEventListener('keydown', handleKeyDown)\n    }, [direction])\n\n    React.useEffect(() => {\n        const interval = gameLoop()\n        step = false;\n        return () => clearInterval(interval) //чтобы не создавалась куча setTimeout\n    }, [snake]) //input-deps, вдруг не обновится\n\n    const generateFood = () => {\n        let newFood\n        do {\n            newFood = [\n                Math.floor(Math.random() * BOARD_SIZE),\n                Math.floor(Math.random() * BOARD_SIZE)\n            ]\n        } while (snake.some(elem => elem[0] === newFood[0] && elem[1] === newFood[1]))\n        setFood(newFood)\n    }\n\n    const gameLoop = () => {\n        const timerId = setTimeout(() => {\n            //console.log('gameLoop')\n            const newSnake = snake\n            let move = []\n\n            switch (direction) {\n                case AVAILABLE_MOVES[0]:\n                    move = [-1, 0]\n                    break;\n                case AVAILABLE_MOVES[1]:\n                    move = [1, 0]\n                    break;\n                case AVAILABLE_MOVES[2]:\n                    move = [0, 1]\n                    break;\n                case AVAILABLE_MOVES[3]:\n                    move = [0, -1]\n                    break;\n            }\n\n\n\n            const head = [\n                checkPositionOut(newSnake[newSnake.length - 1][0] + move[0]),\n                checkPositionOut(newSnake[newSnake.length - 1][1] + move[1])\n            ]\n\n            if(newSnake.some(elem => elem[0] === head[0] && elem[1] === head[1])){\n               // console.log(\"Хана!\")\n                phrase = 'Игра окончена! Ваш счет:'\n                dead = true\n                setGameover(true)\n\n                    // console.log(dead)\n                return timerId\n            }\n            newSnake.push(head)\n\n            let sliceIndex = 1\n            if (head[0] === food[0] && head[1] === food[1]) {\n                sliceIndex = 0\n                generateFood()\n            }\n            setSnake(newSnake.slice(sliceIndex)) // вызывает useEffect\n\n        }, SPEED)\n\n        return timerId\n    }\n\n\n    return (\n        <div className='field'>\n            <h1>{phrase} {(snake.length-1) * 10}</h1>\n\n            {DEFAULT_CELLS_ARRAY.map((row, indexR) => (\n                <div key={indexR} className='row'>\n                    {\n                        row.map((cell, indexC) => {\n                           // let type = (snake[snake.length - 1][0] === indexR && snake[snake.length - 1][1] === indexC) && 'head'\n\n                          //  if (type !== 'head') {\n                                let type = snake.some(\n                                    elem => elem[0] === indexR && elem[1] === indexC\n                                ) && 'snake' //хотя бы одно совпадение исходя из fn\n                                if (type !== 'snake') {\n                                    //if (true) type = food , else null\n                                    type = (food[0] === indexR && food[1] === indexC) && 'food'\n                                }\n                           // }\n\n                            return (\n                                //При маппинге нужно обязательно указывать ключи в атрибут\n                                <Cell key={indexC} type={type}/>\n                            )\n                        })\n                    }\n                </div>\n            ))}\n        </div>\n    );\n}\n\n//лучше в отдельном файле\nconst Cell = ({type}) => {\n    if(type==='snake' && dead) {\n        return <div className={`cell dead`}/>\n    }\n    return <div className={`cell ${type}`}/>\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}